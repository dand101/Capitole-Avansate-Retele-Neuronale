
Epoch 1/50
Training: 100%|██████████| 196/196 [00:42<00:00,  4.56batch/s, loss=4.43]
Average Training Loss: 4.4949
Evaluating: 100%|██████████| 40/40 [00:04<00:00,  9.50batch/s, accuracy=3.62]
Validation Accuracy: 3.62%

Epoch 2/50
Training: 100%|██████████| 196/196 [00:49<00:00,  3.99batch/s, loss=4.35]
Average Training Loss: 4.3185
Evaluating: 100%|██████████| 40/40 [00:04<00:00,  9.65batch/s, accuracy=6.2] 
Validation Accuracy: 6.20%

Epoch 3/50
Training: 100%|██████████| 196/196 [00:37<00:00,  5.22batch/s, loss=3.93]
Average Training Loss: 4.0690
Evaluating: 100%|██████████| 40/40 [00:01<00:00, 30.86batch/s, accuracy=8.38]
Validation Accuracy: 8.38%

Epoch 4/50
Training:  31%|███       | 60/196 [00:10<00:24,  5.49batch/s, loss=4.01]
Traceback (most recent call last):
  File "C:\Users\dando\Documents\GitHub\Capitole-Avansate-Retele-Neuronale\tema3\train.py", line 239, in <module>
    main()
  File "C:\Users\dando\Documents\GitHub\Capitole-Avansate-Retele-Neuronale\tema3\train.py", line 235, in main
    run_training(config, config['sweep']['enabled'])
  File "C:\Users\dando\Documents\GitHub\Capitole-Avansate-Retele-Neuronale\tema3\train.py", line 196, in run_training
    avg_loss = train_one_epoch(model, train_loader, optimizer, device, scaler, other_augmentation)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\dando\Documents\GitHub\Capitole-Avansate-Retele-Neuronale\tema3\train.py", line 124, in train_one_epoch
    for batch in tbar:
  File "C:\Users\dando\AppData\Local\Programs\Python\Python312\Lib\site-packages\tqdm\std.py", line 1181, in __iter__
    for obj in iterable:
  File "C:\Users\dando\AppData\Local\Programs\Python\Python312\Lib\site-packages\torch\utils\data\dataloader.py", line 630, in __next__
    data = self._next_data()
           ^^^^^^^^^^^^^^^^^
  File "C:\Users\dando\AppData\Local\Programs\Python\Python312\Lib\site-packages\torch\utils\data\dataloader.py", line 673, in _next_data
    data = self._dataset_fetcher.fetch(index)  # may raise StopIteration
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\dando\AppData\Local\Programs\Python\Python312\Lib\site-packages\torch\utils\data\_utils\fetch.py", line 52, in fetch
    data = [self.dataset[idx] for idx in possibly_batched_index]
            ~~~~~~~~~~~~^^^^^
  File "C:\Users\dando\AppData\Local\Programs\Python\Python312\Lib\site-packages\torchvision\datasets\cifar.py", line 119, in __getitem__
    img = self.transform(img)
          ^^^^^^^^^^^^^^^^^^^
  File "C:\Users\dando\AppData\Local\Programs\Python\Python312\Lib\site-packages\torchvision\transforms\transforms.py", line 95, in __call__
    img = t(img)
          ^^^^^^
  File "C:\Users\dando\AppData\Local\Programs\Python\Python312\Lib\site-packages\torch\nn\modules\module.py", line 1553, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\dando\AppData\Local\Programs\Python\Python312\Lib\site-packages\torch\nn\modules\module.py", line 1562, in _call_impl
    return forward_call(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\dando\AppData\Local\Programs\Python\Python312\Lib\site-packages\torchvision\transforms\transforms.py", line 277, in forward
    return F.normalize(tensor, self.mean, self.std, self.inplace)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\dando\AppData\Local\Programs\Python\Python312\Lib\site-packages\torchvision\transforms\functional.py", line 350, in normalize
    return F_t.normalize(tensor, mean=mean, std=std, inplace=inplace)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\dando\AppData\Local\Programs\Python\Python312\Lib\site-packages\torchvision\transforms\_functional_tensor.py", line 918, in normalize
    mean = torch.as_tensor(mean, dtype=dtype, device=tensor.device)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
KeyboardInterrupt
